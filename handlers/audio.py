import logging
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from .keyboards import cut_kb, cover_type_kb
from config import DEFAULT_COVER
from utils import (
    save_audio, 
    save_cover, 
    extract_cover, 
    send_result, 
    convert_to_square,
    cut_audio_async
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

class AudioFSM(StatesGroup):
    waiting_for_audio = State()
    waiting_for_cut = State()
    waiting_for_cover = State()
    waiting_for_custom_cover = State()

async def delete_previous_messages(bot, chat_id, state):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
    data = await state.get_data()
    message_ids = data.get("message_ids", [])
    
    for msg_id in message_ids:
        try:
            await bot.delete_message(chat_id, msg_id)
        except TelegramBadRequest as e:
            if "message to delete not found" not in str(e):
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    
    await state.update_data(message_ids=[])

async def save_and_track_message(message, state):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    message_ids = data.get("message_ids", [])
    message_ids.append(message.message_id)
    await state.update_data(message_ids=message_ids)
    return message

@router.callback_query(F.data == "create_circle")
async def start_audio(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        
        try:
            await callback.message.delete()
        except TelegramBadRequest as e:
            if "message to delete not found" not in str(e):
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        msg = await callback.message.answer("üéµ –ü—Ä–∏—à–ª–∏—Ç–µ mp3 –∏–ª–∏ m4a —Ñ–∞–π–ª —Å –æ–±–ª–æ–∂–∫–æ–π –∏–ª–∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        await save_and_track_message(msg, state)
        await state.set_state(AudioFSM.waiting_for_audio)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_audio: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.message(
    AudioFSM.waiting_for_audio, 
    (F.document & (F.document.mime_type.in_(["audio/mpeg", "audio/mp4", "audio/x-m4a"]))) | F.audio
)
async def handle_audio(message: Message, state: FSMContext):
    try:
        await delete_previous_messages(message.bot, message.chat.id, state)
        
        processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫–∞...")
        await save_and_track_message(processing_msg, state)
        
        mp3_path = await save_audio(message)
        
        track_info = "üéµ –í–∞—à —Ç—Ä–µ–∫"
        if message.audio:
            artist = message.audio.performer or ""
            title = message.audio.title or ""
            if artist or title:
                track_info = f"üé∂ {artist} - {title}"
        elif message.document:
            # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞
            if message.document.file_name:
                track_info = f"üéµ {message.document.file_name}"
        
        await state.update_data(
            audio_path=mp3_path,
            track_info=track_info
        )
        
        msg = await processing_msg.edit_text(
            f"{track_info}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –æ–±—Ä–µ–∑–∫–∏:",
            reply_markup=cut_kb()
        )
        await save_and_track_message(msg, state)
        await state.set_state(AudioFSM.waiting_for_cut)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
        await delete_previous_messages(message.bot, message.chat.id, state)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
        await state.clear()

@router.callback_query(AudioFSM.waiting_for_cut, F.data.startswith("cut_"))
async def handle_cut(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        await delete_previous_messages(callback.bot, callback.message.chat.id, state)
        
        data = await state.get_data()
        start_sec = int(callback.data.split("_")[1])
        
        processing_msg = await callback.message.answer("‚úÇÔ∏è –û–±—Ä–µ–∑–∞—é –∞—É–¥–∏–æ...")
        await save_and_track_message(processing_msg, state)
        
        cut_mp3_path = await cut_audio_async(data['audio_path'], start_sec)
        
        cover_msg = await processing_msg.edit_text("üñºÔ∏è –ò–∑–≤–ª–µ–∫–∞—é –æ–±–ª–æ–∂–∫—É...")
        cover_path = await extract_cover(cut_mp3_path)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –æ–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        if not cover_path:
            await cover_msg.edit_text("‚ö†Ô∏è –û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ. –ë—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –≤—ã–±–æ—Ä –æ–±–ª–æ–∂–∫–∏.")
            cover_path = None
        
        await state.update_data(
            audio_path=cut_mp3_path,
            cover_path=cover_path,
            start_time=0,
            cut_sec=start_sec
        )
        
        cover_menu = await cover_msg.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±–ª–æ–∂–∫–∏:",
            reply_markup=cover_type_kb()
        )
        await save_and_track_message(cover_menu, state)
        await state.set_state(AudioFSM.waiting_for_cover)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_cut: {e}")
        await delete_previous_messages(callback.bot, callback.message.chat.id, state)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.clear()

@router.callback_query(AudioFSM.waiting_for_custom_cover, F.data == "back_to_cover_menu")
async def back_to_cover_menu(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        cover_menu = await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±–ª–æ–∂–∫–∏:",
            reply_markup=cover_type_kb()
        )
        await save_and_track_message(cover_menu, state)
        await state.set_state(AudioFSM.waiting_for_cover)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_cover_menu: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.callback_query(AudioFSM.waiting_for_cover, F.data == "cover_custom")
async def handle_custom_cover(callback: CallbackQuery, state: FSMContext):
    try:
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é –æ–±–ª–æ–∂–∫—É")
        await callback.answer()
        
        back_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_cover_menu")]
        ])
        
        msg = await callback.message.answer(
            "üñºÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—é –æ–±–ª–æ–∂–∫—É (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ):",
            reply_markup=back_kb
        )
        await save_and_track_message(msg, state)
        await state.set_state(AudioFSM.waiting_for_custom_cover)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_custom_cover: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.callback_query(AudioFSM.waiting_for_cover, F.data == "cover_default")
async def handle_default_cover(callback: CallbackQuery, state: FSMContext):
    try:
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±–ª–æ–∂–∫–∞")
        await callback.answer()
        await state.update_data(cover_path=DEFAULT_COVER)
        await start_video_processing(callback.message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_default_cover: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.callback_query(AudioFSM.waiting_for_cover, F.data == "cover_file")
async def handle_file_cover(callback: CallbackQuery, state: FSMContext):
    try:
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: –û–±–ª–æ–∂–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞/–º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
        await callback.answer()
        await start_video_processing(callback.message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_file_cover: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.message(AudioFSM.waiting_for_custom_cover, F.photo)
async def handle_photo_cover(message: Message, state: FSMContext):
    try:
        await delete_previous_messages(message.bot, message.chat.id, state)
        
        processing_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –æ–±–ª–æ–∂–∫—É...")
        await save_and_track_message(processing_msg, state)
        
        cover_path = await save_cover(message)
        square_cover = await convert_to_square(cover_path)
        
        await state.update_data(cover_path=square_cover)
        await start_video_processing(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
        await delete_previous_messages(message.bot, message.chat.id, state)
        error_msg = await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")
        await save_and_track_message(error_msg, state)

async def start_video_processing(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        track_info = data.get('track_info', '–í–∞—à —Ç—Ä–µ–∫')
        
        processing_msg = await message.answer(
            f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –¥–ª—è:\n{track_info}\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç 20-60 —Å–µ–∫—É–Ω–¥..."
        )
        await save_and_track_message(processing_msg, state)
        
        await send_result(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫.")
    finally:
        await delete_previous_messages(message.bot, message.chat.id, state)
        await state.clear()