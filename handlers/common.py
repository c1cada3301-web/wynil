from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from handlers.keyboards import main_menu_kb, back_kb
from db import get_user, set_subscription, check_access
from utils import is_user_subscribed
import logging

router = Router()
logger = logging.getLogger(__name__)

CHANNEL_ID = "-1002083327630"  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ @swr24
WELCOME_TEXT = (
    "üåà <b>–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–ª—å–Ω—ã–π –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫</b>\n\n"
    "‚ú® –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ <b>¬´–°–æ–∑–¥–∞—Ç—å –∫—Ä—É–∂–æ–∫¬ª</b> –∏ –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–π —Ç—Ä–µ–∫\n\n"
    "üíñ <b>–ë–æ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π</b>, –±—É–¥—É —Ä–∞–¥ –≤–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
    "üéõÔ∏è –ü—Ä–æ–µ–∫—Ç –ª–µ–π–±–ª–∞ <b>Sovietwave Records</b> ‚Äî @swr24"
)

async def check_subscription_and_send_welcome(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        is_sub = await is_user_subscribed(message.bot, message.from_user.id, CHANNEL_ID)
        await set_subscription(message.from_user.id, is_sub)
        
        if not is_sub:
            await message.answer(
                "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @swr24.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ /start —Å–Ω–æ–≤–∞.",
                parse_mode="HTML"
            )
            return False
        
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            WELCOME_TEXT,
            reply_markup=main_menu_kb(),
            parse_mode="HTML"
        )
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_kb()
        )
        return False

@router.message(Command("start"))
@router.message(F.text == "/start")
async def send_welcome(message: Message):
    await check_subscription_and_send_welcome(message)

async def show_main_menu(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await state.clear()
    try:
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        elif isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.answer()
            await message_or_callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    except Exception:
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.message.delete()
            await message_or_callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

@router.callback_query(F.data == "start")
async def main_menu_start(callback: CallbackQuery, state: FSMContext):
    is_subscribed = await is_user_subscribed(callback.bot, callback.from_user.id, CHANNEL_ID)
    await set_subscription(callback.from_user.id, is_subscribed)
    
    if not is_subscribed:
        await callback.message.answer("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @swr24.")
        return
    
    await callback.message.edit_text(
        "üåà –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–ª—å–Ω—ã–π –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫.\n\n"
        "‚ú® –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´–°–æ–∑–¥–∞—Ç—å –∫—Ä—É–∂–æ–∫¬ª –∏ –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–π —Ç—Ä–µ–∫\n"
        "üî• –ü—Ä–æ–µ–∫—Ç –ª–µ–π–±–ª–∞ Sovietwave Records @swr24",
        reply_markup=main_menu_kb(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await show_main_menu(callback, state)

@router.message(F.text == "üéµ –°–æ–∑–¥–∞—Ç—å –∫—Ä—É–∂–æ–∫")
async def create_circle_handler(message: Message, state: FSMContext):
    if not await check_access(message.from_user.id):
        await message.answer("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @swr24.")
        return
    
    await message.answer(
        "‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∏ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª:",
        reply_markup=back_kb()
    )

@router.message(F.text == "‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
async def support_handler(message: Message):
    await message.answer(
        "üíñ –ü–æ–¥–¥–µ—Ä–∂–∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
        "üëâ https://t.me/tribute/app?startapp=dswf\n\n"
        "–ö–∞–∂–¥—ã–π –¥–æ–Ω–∞—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∞—Ç—å –±–æ—Ç–∞!",
        reply_markup=back_kb(),
        disable_web_page_preview=True
    )

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_handler(message: Message, state: FSMContext):
    await show_main_menu(message, state)