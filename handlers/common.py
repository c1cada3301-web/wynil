from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from handlers.keyboards import (
    main_menu_kb, cut_kb, cover_type_kb, back_kb,
    promo_kb, status_kb, pay_kb, payment_keyboard
)
from handlers.promo import PromoFSM
from db import get_user, set_subscription
from utils import (
    save_audio,
    extract_cover,
    save_cover,
    prepare_cover,
    make_rotating_circle_video_bytes,
    send_result,
    audio_to_ogg,
    is_user_subscribed,
)

import tempfile
import os

router = Router()

CHANNEL_ID = "-1002083327630"  # ID —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ @swr24

class AudioFSM(StatesGroup):
    waiting_for_audio = State()
    waiting_for_cut = State()
    waiting_for_cover = State()
    waiting_for_custom_cover = State()

async def show_main_menu(message_or_callback, state: FSMContext):
    await state.clear()
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
    elif isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.answer()
        try:
            await message_or_callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
        except Exception:
            await message_or_callback.message.delete()
            await message_or_callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)

@router.message(Command("start"))
@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext, bot):
    is_subscribed = await is_user_subscribed(bot, message.from_user.id, CHANNEL_ID)
    await set_subscription(message.from_user.id, is_subscribed)
    if not is_subscribed:
        await message.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @swr24, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return
    await message.answer(
        "<b>üíû–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Svinyl!</b>\n\n"
        "üéº–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–∏ <b>–º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Å–Ω–∏–ø–ø–µ—Ç—ã</b> –≤ –≤–∏–¥–µ –∫—Ä—É–∂–∫–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º. "
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ mp3-—Ñ–∞–π–ª —Å –æ–±–ª–æ–∂–∫–æ–π, –Ω–∞—Å—Ç—Ä–æ–π –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã –∏ –ø–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
        "üí•–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç <b>–±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π</b>, –¥–∞–ª—å—à–µ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å <b>–ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 50 –∑–≤—ë–∑–¥.</b> "
        "–ò –ø–æ–≤–µ—Ä—å, —ç—Ç–æ –¥–µ—à–µ–≤–ª–µ, —á–µ–º —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ <b>–≤ 50%!</b>\n\n"
        "‚ù§Ô∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, <b>–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª</b> @swr24, –¥–∞–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ <b>—Ä–∞–∑–¥–∞—á–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b> –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ. –£–¥–∞—á–∏!",
        reply_markup=main_menu_kb,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "start")
async def main_menu_start(callback: CallbackQuery, state: FSMContext, bot):
    is_subscribed = await is_user_subscribed(bot, callback.from_user.id, CHANNEL_ID)
    await set_subscription(callback.from_user.id, is_subscribed)
    if not is_subscribed:
        await callback.message.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @swr24, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return
    await show_main_menu(callback, state)

@router.callback_query(F.data == "create_circle")
async def start_create_circle(callback: CallbackQuery, state: FSMContext, bot):
    is_subscribed = await is_user_subscribed(bot, callback.from_user.id, CHANNEL_ID)
    await set_subscription(callback.from_user.id, is_subscribed)
    if not is_subscribed:
        await callback.message.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @swr24, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return
    await callback.answer()
    try:
        await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ mp3-—Ñ–∞–π–ª —Å –æ–±–ª–æ–∂–∫–æ–π.")
    except Exception:
        await callback.message.delete()
        await callback.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ mp3-—Ñ–∞–π–ª —Å –æ–±–ª–æ–∂–∫–æ–π.")
    await state.set_state(AudioFSM.waiting_for_audio)

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
    except Exception:
        await callback.message.delete()
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
    await state.clear()

@router.callback_query(F.data == "promo")
async def main_menu_promo(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=promo_kb)
    await state.set_state(PromoFSM.waiting_for_code)

@router.callback_query(F.data == "pay")
async def main_menu_pay(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram Stars (–∑–≤—ë–∑–¥—ã). –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
        reply_markup=pay_kb
    )

@router.callback_query(F.data == "status")
async def main_menu_status(callback: CallbackQuery):
    await callback.answer()
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=status_kb)
    else:
        is_subscribed, free_until, has_unlimited = user[2], user[3], user[4]
        if has_unlimited:
            status = "–ë–µ—Å—Å—Ä–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø"
            duration = "‚àû"
        elif is_subscribed:
            status = "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞"
            duration = f"–¥–æ {free_until}"
        elif free_until:
            status = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
            duration = f"–¥–æ {free_until}"
        else:
            status = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
            duration = "-"
        await callback.message.answer(
            f"–í–∞—à —Å—Ç–∞—Ç—É—Å: {status}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {duration}",
            reply_markup=status_kb
        )

@router.callback_query(F.data == "pay_stars")
async def handle_pay_stars(callback: CallbackQuery):
    await callback.answer()
    prices = [LabeledPrice(label="XTR", amount=50)]
    await callback.message.answer_invoice(
        title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
        description="–û–ø–ª–∞—Ç–∏—Ç—å –±–æ—Ç–∞ –∑–∞ 50 –∑–≤—ë–∑–¥!",
        provider_token="1877036958:TEST:f28652a4dc644148075ca5df733d2c055f6d18b4",  # <-- –£–∫–∞–∂–∏—Ç–µ –≤–∞—à provider_token –¥–ª—è Telegram Stars
        currency="XTR",
        prices=prices,
        payload="channel_support",
        reply_markup=payment_keyboard(),
    )

@router.message(AudioFSM.waiting_for_custom_cover, F.photo)
async def handle_photo_cover(message: Message, state: FSMContext):
    await message.delete()
    cover_path = await save_cover(message)
    await state.update_data(final_cover=cover_path)
    processing_msg = await message.answer("‚è≥ –¢—Ä–µ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await send_result(message, state)
    await processing_msg.delete()

@router.callback_query(AudioFSM.waiting_for_cover, F.data.in_(["cover_file", "cover_default"]))
async def handle_cover_choice(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    if callback.data == "cover_default":
        cover_path = "default_cover.jpg"
    else:
        cover_path = data.get("cover_path", "default_cover.jpg")
    prepared_cover = cover_path.rsplit('.', 1)[0] + "_512.jpg"
    await prepare_cover(cover_path, prepared_cover, 512)
    await state.update_data(final_cover=prepared_cover)
    processing_msg = await callback.message.answer("‚è≥ –¢—Ä–µ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await send_result(callback.message, state)
    await processing_msg.delete()

@router.message(AudioFSM.waiting_for_audio, (F.document & (F.document.mime_type == "audio/mpeg")) | F.audio)
async def handle_mp3(message: Message, state: FSMContext):
    processing_msg = await message.answer("‚è≥ –¢—Ä–µ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    mp3_path = await save_audio(message)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ utils.py
    cover_path = await extract_cover(mp3_path)
    await state.update_data(mp3_path=mp3_path, cover_path=cover_path)
    await processing_msg.delete()
    await message.answer("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –æ–±—Ä–µ–∑–∫–∏:", reply_markup=cut_kb)
    await state.set_state(AudioFSM.waiting_for_cut)

keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–û–±–ª–æ–∂–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞", callback_data="cover_file"),
        InlineKeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±–ª–æ–∂–∫–∞", callback_data="cover_default"),
        InlineKeyboardButton(text="–°–≤–æ—è –æ–±–ª–æ–∂–∫–∞", callback_data="cover_custom"),
    ],
    [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    ]
])
